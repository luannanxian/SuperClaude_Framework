name: Publish to PyPI

on:
  # Trigger on new releases
  release:
    types: [published]
    
  # Allow manual triggering
  workflow_dispatch:

# Restrict permissions for security
permissions:
  contents: write # Changed from read to write for uploading release assets

jobs:
  build-and-publish:
    name: Build and publish Python package
    runs-on: ubuntu-latest
    # The 'environment' block for PyPI is no longer needed
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch full history for proper version detection
        fetch-depth: 0
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
      
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine toml
      
    - name: Verify package structure
      run: |
        echo "📦 Checking package structure..."
        ls -la
        echo "🔍 Checking SuperClaude package..."
        ls -la superclaude/
        echo "🔍 Checking setup package..."
        ls -la setup/
        
        # Verify version consistency
        echo "📋 Checking version consistency..."
        python -c "
        import toml
        import sys
        sys.path.insert(0, '.')
        
        # Load pyproject.toml version
        with open('pyproject.toml', 'r') as f:
            pyproject = toml.load(f)
        pyproject_version = pyproject['project']['version']
        
        # Load package version
        from superclaude import __version__
        
        print(f'pyproject.toml version: {pyproject_version}')
        print(f'Package version: {__version__}')
        
        if pyproject_version != __version__:
            print('❌ Version mismatch!')
            sys.exit(1)
        else:
            print('✅ Versions match')
        "
      
    - name: Clean previous builds
      run: |
        rm -rf dist/ build/ *.egg-info/
      
    - name: Build package
      run: |
        echo "🔨 Building package..."
        python -m build
        echo "📦 Built files:"
        ls -la dist/
      
    - name: Validate package
      run: |
        echo "🔍 Validating package..."
        python -m twine check dist/*
      
    # Removed: 'Upload to TestPyPI' step

    # Removed: 'Upload to PyPI' step

    - name: Upload to GitHub Release
      if: github.event_name == 'release'
      run: |
        echo "🚀 Uploading to GitHub Release..."
        gh release upload ${{ github.event.release.tag_name }} dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload as Workflow Artifact
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
      
    - name: Create deployment summary
      if: always()
      run: |
        echo "## 📦 SuperClaude Package Deployment" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" == "release" ]; then
          echo "| Target | GitHub Release |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Target | Workflow Artifact |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "| Trigger | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Version | $(python -c 'from superclaude import __version__; print(__version__)') |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" == "release" ]; then
          echo "🎉 **Production release assets published to GitHub Release!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "🧪 **Build complete. Package available as a workflow artifact.**" >> $GITHUB_STEP_SUMMARY
        fi

  # Removed: 'test-installation' job as we no longer publish to TestPyPI

